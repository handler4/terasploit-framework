#######
# Exploit: Aggregator
#######

from libs.terasploit.framework.opts.opt_distributor import Opt
from urllib.parse import urlparse

import logging
logger = logging.getLogger()

class ShellContainer(object):
    """ Contains shell from exploit targets """
    
    def __init__(self, shell: str):
        logger.info(f'Shell gathered {shell}')
        self.shell = shell
        
    def __get__(self,instance,owner):
        logger.info('Shell was accessed')
        return self.shell
    
class InsertShell(ShellContainer):
    """ Inserts shell into shell container class """
    
    def __set__(self,instance,value):
        logger.info('New shell inserted in shell container')
        self.shell = value
        

class Shell:
    """ Descriptor classes handler """
    
    shell = InsertShell('')
    
    def __init__(self, url: str = '') -> None:
        self.url = url
    
    def new(self) -> None:
        setattr(self,'shell',self.url)
        
    def get(self) -> str:
        return getattr(self,'shell')
    

class ExploitAggregator(object):
    """ Gather contents for session """
    
    def __init__(self, shell_type: str) -> None:
        self.shell = shell_type
        self.lhost = Opt('payload').GetOPT('lhost')
        self.lport = Opt('payload').GetOPT('lport')
        
    def return_contents(self):
        if self.shell in ['reverse_tcp','reverse_udp']:
            return self.lhost, self.lport
        
        if self.shell == 'backdoor_cmd':
            return urlparse(Shell.get).hostname, Shell.get() 