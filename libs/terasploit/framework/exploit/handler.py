#######
# Exploit: Handler
#######

from libs.terasploit.framework.exploit.aggregator import ExploitAggregator
from libs.terasploit.framework.info.info_container import module_info
from init.tsf.core.wildcard import Logger
from init.tsf.ui.wildcard import info_print

from libs.terasploit.framework.sessions import (
    reverse_tcp,
    reverse_udp,
    backdoor_cmd
)


class SessionStart(ExploitAggregator):
    """ Session starter class """
    
    def __init__(self,shell_type) -> None:
        if shell_type == 'reverse_tcp':
            lhost, lport = ExploitAggregator(shell_type).return_contents()
            Logger('info',f'Started reverse TCP handler on {lhost}:{lport}...')
            info_print (f'Started reverse TCP handler on {lhost}:{lport}...')
            reverse_tcp.CommandPrompt(lhost,int(lport))
            
        if shell_type == 'reverse_udp':
            lhost, lport = ExploitAggregator(shell_type).return_contents()
            Logger('info',f'Started reverse UDP handler on {lhost}:{lport}...')
            info_print (f'Started reverse UDP handler on {lhost}:{lport}...')
            reverse_udp.CommandPrompt(lhost,int(lport))
            
        if shell_type == 'backdoor_cmd':
            target, shell = ExploitAggregator(shell_type).return_contents()
            Logger('info',f'Started reverse UDP handler on {lhost}:{lport}...')
            info_print (f'Started reverse UDP handler on {lhost}:{lport}...')
            backdoor_cmd.CommandPrompt(shell,target)
            

class exploit_session(SessionStart):
    """ Exploit session caller """
    
    def __init__(self, start_session: bool = False) -> None:
        if start_session:
            try:
                super().__init__(shell_type=module_info.payload_info['Type'])
                info_print ('Exploit module done! session completed.')
            except Exception as error:
                info_print (error,type='RED')
                info_print ('Exploit module done! session failed to start.')
        
        if not start_session:
            info_print ('Exploit module done! no session started.')
            return