#######
# Exploit: Handler
#######

from libs.terasploit.framework.exploit.aggregator import ExploitAggregator
from libs.terasploit.framework.info.info_container import module_info
from init.tsf.core.wildcard import Logger
from init.tsf.ui.wildcard import info_print

from libs.terasploit.framework.sessions.shell import (
    reverse_udp,
    reverse_tcp
)

class SessionStart(ExploitAggregator):
    """ Session starter class """
    
    def __init__(self,PayloadHandler) -> None:
        Logger('info',f'Starting {PayloadHandler} handler...')
        
        if PayloadHandler == 'reverse_tcp':
            lhost, lport = ExploitAggregator(PayloadHandler).return_contents()
            info_print (f'Started reverse TCP handler on {lhost}:{lport}...')
            reverse_tcp.Interpreter(lhost,int(lport))
            
        if PayloadHandler == 'reverse_udp':
            lhost, lport = ExploitAggregator(PayloadHandler).return_contents()
            info_print (f'Started reverse UDP handler on {lhost}:{lport}...')
            reverse_udp.Interpreter(lhost,int(lport))
            

class exploit_session(SessionStart):
    """ Exploit session caller """
    
    def __init__(self, start_session: bool = False) -> None:
        if start_session:
            try:
                super().__init__(module_info.payload_info['PayloadHandler'])
                info_print ('Exploit module done! session completed.')
  
            except Exception as error:
                info_print (error,type=='RED')
                info_print ('Exploit module done! session failed to start.')
        
        if not start_session:
            info_print ('Exploit module done! no session started.')
            return