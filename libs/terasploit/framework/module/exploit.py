#######
# Module: Exploit
#######

from __future__ import annotations

import random
import string
import urllib3
import re
import requests

from requests.auth import HTTPDigestAuth
from urllib.parse import urlparse
from bs4 import BeautifulSoup

from libs.terasploit.framework.opts.opt_distributor import Opt
from libs.terasploit.framework.exploit.aggregator import Shell

from init.terasploit.framework.clients.wildcard import (
    HTTP,
    HTTPClient,
    TCPClient,
    UDPClient,
    SOCKClient
)

from init.tsf.ui.wildcard import info_print

__all__ = [
    'Opt',
    'Exploit',
    'info_print',
    'HTTP',
    'HTTPClient',
    'TCPClient',
    'UDPClient',
    'SOCKClient',
    'Shell',
    
    'requests',
    're',
    'HTTPDigestAuth',
    'BeautifulSoup'
]

class Exploit(object):
    
    def GetOPT(self, opt: str):
        """ Returns the value of an option """
        
        return Opt('exploit').GetOPT(opt)
    
    
    def EncodeShell(self, encoder, content) -> any|None:
        """ 
        Encoder
        
        This will check if an encoder was used, if there
        is an encoder currently in used, it will encode
        the payload contents and return it encoded.
        """
        
        if encoder:
            encode_payload, boolean = encoder.encode(content)
            if boolean:
                return encode_payload
            else:
                return content
        if not encoder:
            return content
            
    def ParseTarget(self, vals, return_list: list = []) -> list:
        """ Target Parser
        
        This is limited to scheme, hostname, and path only. 
        This will parse the url into three objects and return
        it base on what the user wants to return
        """
        
        url = urlparse(vals)

        scheme: str = url.scheme
        hostname: str = url.hostname
        path: str = url.path
        params: str = url.params
        query: str = url.query
        fragment: str = url.query
        username: str = url.username
        password: str = url.password
        port: int = url.port
        
        out: list = []

        for i in return_list:
            if i.lower() == 'scheme':
                out.append(scheme)
            if i.lower() == 'hostname':
                out.append(hostname)
            if i.lower() == 'path':
                out.append(path)
            if i.lower() == 'params':
                out.append(params)
            if i.lower() == 'query':
                out.append(query)
            if i.lower() == 'fragment':
                out.append(fragment)
            if i.lower() == 'username':
                out.append(username)
            if i.lower() == 'password':
                out.append(password)
            if i.lower() == 'port':
                out.append(port)
            else:
                pass
        return out
        
        
    def RandomName(self) -> str:
        """ Random Name Generator
        
        Generates a random int and str character and put it together to 
        create a random name for files and others.
        """
        
        return ''.join(random.choice(string.ascii_letters + string.digits) for i in range(10))


    def good_status_code(self) -> list[int]:
        """ Good Status Codes
        
        Returns a good status code, most likely for requests post or get.
        """
        
        return [200,201]
    
    
    def disable_insecure_request_warning(self) -> None:
        """ Insecure request warning
        
        Disables warning from urllib3 that indicates 
        insecure http request.
        """
        
        return urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    
    def pool_manager_cert_required(self,cert_Reqs) -> urllib3.PoolManager:
        """ cert required pool manager - urllib3 """
        
        return urllib3.PoolManager(cert_reqs=cert_Reqs)