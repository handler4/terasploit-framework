#!/usr/bin/env python3

""" Terasploit Framework 

Developed by Handler4, is an exploitation framework
designed for linux systems only.

I'm handler4 and I am a huge fan of metasploit framework,
that's also why I made this exploitation framework very
similar to msfconsole. I am alone in this fun project so
updates will be very slow

I am quite inexperienced in cyber security as I am a college 
bs psychology student, but I have always dreamed of being a 
good hacker haha. Despite being quite inexperienced in 
cybersecurity, I will do my best to provide the best out of 
this framework.

I am currently struggling on testing out my exploit modules
as I am a busy person and I am only doing this as my favorite
hobby. But some of the exploit modules have been tested out
via xampp in windows. Do send me some feedbacks if the modules
requires some update/upgrade and do elaborate clearly the 
details and give proper instructions if must.


   Exploit Source  :  https://exploit-db.com
   Email           :  handler4.nsi@gmail.com
   Github Link     :  https://github.com/handler/terasploit-framework

"""

try:
    """ :Starting Point:
    
    Imports required tsf libraries then imports
    all required libraries for modules
    """
    
    import sys; sys.dont_write_bytecode=True
    from libs.terasploit.framework.console import *
    from init.tsf.ui.wildcard import *

    with Loading(message='[*] Starting Terasploit Framework Console...'):
        
        from libs.terasploit.framework.module.auxiliary import *
        from libs.terasploit.framework.module.encoder import *
        from libs.terasploit.framework.module.exploit import *
        
        # Payloads only contains shell codes and opts,
        # they don't have python libraries to use.
        # That's why it is not included. The sole
        # purpose of this wildcard import is to eliminate
        # delays when using modules once the console 
        # started.

    clean_last_line()
                
except KeyboardInterrupt:
    print (' '*80+'\r', end='')
    print ('[*] Startup aborted...')
    raise SystemExit(130)
    # Returns exit code 130 - Indicates that the command or script was terminated 
    # by the user using Control-C (SIGINT signal).
    
except Exception as error:
    print (' '*80+'\r', end='')
    print (f'[*] Startup failed...')
    print (f'[*] Error: {error}')
    raise SystemExit(1)
    # Returns exit code 1 - A catch-all exit code for a variety of general errors. 
    # Often used when the command or program encounters an error, but no specific 
    # exit code is available for the situation.


if __name__ == '__main__':
    clean_last_line()
    start()
