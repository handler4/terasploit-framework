#!/usr/bin/env python3

try:
    import sys; sys.dont_write_bytecode = True
    import traceback
    
    from init.teralib.ui import (
        clean_last_line,
        banner,
        Spinner
    )
    from init.teralib.base import Search
    
    from libs.terasploit.framework.interpreter import base
    from libs import args
    
except KeyboardInterrupt:
    print (f'[*] Terasploit console startup aborted...')
    raise SystemExit

except:
    lines = traceback.format_exc().splitlines()
    trace = traceback.format_tb(sys.exception().__traceback__)
    print (f'[*] Terasploit startup failed!')
    print (f'[*] {lines[0]} \n')
    for i in trace:
        print (f"  --> {i}")
    print (f'[*] Error: {lines[-1]}')
    raise SystemExit

        
class console:
    """ Console starter """
    
    def start() -> None:
        modules = Search.all_modules()
        banner(modules)
        base.interpreter()


class terasploit:
    """ Terasploit Framework Class """
    
    def start() -> None:
        try:
            with Spinner(message='[*] Starting Terasploit Framework Console...'):
                from init import modules as _
            clean_last_line()
            console.start()
            
        except KeyboardInterrupt:
            print (f'[*] Terasploit console startup aborted...')
            raise SystemExit
        
        except SystemExit:
            raise SystemExit
        
        except:
            lines = traceback.format_exc().splitlines()
            trace = traceback.format_tb(sys.exception().__traceback__)
            print (f'[*] Terasploit startup failed!')
            print (f'[*] {lines[0]} \n')
            for i in trace:
                print (f"  --> {i}")
            print (f'[*] Error: {lines[-1]}')
            raise SystemExit


if __name__ == '__main__':
    args.Argv() if len(sys.argv) > 1 else terasploit.start()